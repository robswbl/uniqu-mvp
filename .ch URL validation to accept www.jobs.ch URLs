warning: in the working copy of 'src/lib/i18n/en.json', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'src/routes/results/[sessionId]/letters/+page.svelte', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/src/lib/i18n/en.json b/src/lib/i18n/en.json[m
[1mindex 9059c79..290ab61 100644[m
[1m--- a/src/lib/i18n/en.json[m
[1m+++ b/src/lib/i18n/en.json[m
[36m@@ -158,7 +158,8 @@[m
       "accepted": "Offer Received"[m
     },[m
     "update_title": "Update Title",[m
[31m-    "linkedin_url_warning": "Please make sure to paste the direct link of the job posting page (starting with https://www.linkedin.com/jobs/view/...), not the search results page.\n\nYou can get to the job posting by clicking on the job title (e.g. \"Managing Director, 100%\") in the search results."[m
[32m+[m[32m    "linkedin_url_warning": "Please make sure to paste the direct link of the job posting page (starting with https://www.linkedin.com/jobs/view/...), not the search results page.\n\nYou can get to the job posting by clicking on the job title (e.g. \"Managing Director, 100%\") in the search results.",[m
[32m+[m[32m    "enter_company_name": "Enter the company name"[m
   },[m
   "all_documents": {[m
     "title": "All Generated Documents",[m
[1mdiff --git a/src/routes/results/[sessionId]/letters/+page.svelte b/src/routes/results/[sessionId]/letters/+page.svelte[m
[1mindex 3662266..e503b73 100644[m
[1m--- a/src/routes/results/[sessionId]/letters/+page.svelte[m
[1m+++ b/src/routes/results/[sessionId]/letters/+page.svelte[m
[36m@@ -160,6 +160,124 @@[m
 		return Array.from(companies).slice(0, 10); // Limit to 10 companies[m
 	}[m
 [m
[32m+[m	[32masync function analyzePainPoints() {[m
[32m+[m		[32mif (!companyPortalUrl.trim()) {[m
[32m+[m			[32malert('Please enter a company portal URL');[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif (jobsChWarning) {[m
[32m+[m			[32malert('Please enter a valid jobs.ch URL');[m
[32m+[m			[32mreturn;[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mtry {[m
[32m+[m			[32manalyzingPainPoints = true;[m
[32m+[m
[32m+[m			[32m// Get user_id from questionnaire_sessions[m
[32m+[m			[32mconst { data: sessionData, error: sessionError } = await supabase[m
[32m+[m				[32m.from('questionnaire_sessions')[m
[32m+[m				[32m.select('user_id, generation_id')[m
[32m+[m				[32m.eq('id', sessionId)[m
[32m+[m				[32m.single();[m
[32m+[m
[32m+[m			[32mif (sessionError) {[m
[32m+[m				[32mthrow new Error('Could not find session: ' + sessionError.message);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32m// Create initial application letter record[m
[32m+[m			[32mconst letterData = {[m
[32m+[m				[32msession_id: sessionId,[m
[32m+[m				[32mstatus: 'draft',[m
[32m+[m				[32mnotes: null,[m
[32m+[m				[32mlanguage: newLetterLanguage,[m
[32m+[m				[32mcompany_name: customCompany || selectedCompany,[m
[32m+[m				[32mpain_points: null,[m
[32m+[m				[32maddress: null,[m
[32m+[m				[32mjob_url: null[m
[32m+[m			[32m};[m
[32m+[m
[32m+[m			[32mconst { data: newLetter, error: insertError } = await supabase[m
[32m+[m				[32m.from('application_letters')[m
[32m+[m				[32m.insert(letterData)[m
[32m+[m				[32m.select()[m
[32m+[m				[32m.single();[m
[32m+[m
[32m+[m			[32mif (insertError) throw insertError;[m
[32m+[m
[32m+[m			[32m// Call pain points analysis webhook[m
[32m+[m			[32mconst webhookData = {[m
[32m+[m				[32muser_id: sessionData.user_id,[m
[32m+[m				[32msession_id: sessionId,[m
[32m+[m				[32mapplication_letter_id: newLetter.id,[m
[32m+[m				[32mgeneration_id: sessionData.generation_id,[m
[32m+[m				[32mlanguage: newLetterLanguage,[m
[32m+[m				[32mjob_portal: 'jobs.ch',[m
[32m+[m				[32mcompany_portal_url: companyPortalUrl.trim()[m
[32m+[m			[32m};[m
[32m+[m
[32m+[m			[32mconsole.log('Calling pain points analysis webhook with data:', webhookData);[m
[32m+[m
[32m+[m			[32mconst webhookResponse = await fetch('https://manage.app.n8n.cloud/webhook/clients/uniqu/painpoint-analysis', {[m
[32m+[m				[32mmethod: 'POST',[m
[32m+[m				[32mheaders: { 'Content-Type': 'application/json' },[m
[32m+[m				[32mbody: JSON.stringify(webhookData)[m
[32m+[m			[32m});[m
[32m+[m
[32m+[m			[32mif (!webhookResponse.ok) {[m
[32m+[m				[32mthrow new Error(`Pain points analysis failed: ${webhookResponse.status} ${webhookResponse.statusText}`);[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mconst webhookResult = await webhookResponse.json();[m
[32m+[m			[32mconsole.log('Pain points analysis webhook response:', webhookResult);[m
[32m+[m
[32m+[m			[32m// Start polling for completion[m
[32m+[m			[32mpollForPainPointsAnalysis(newLetter.id);[m
[32m+[m
[32m+[m		[32m} catch (err) {[m
[32m+[m			[32merror = err && err.message ? err.message : 'Error analyzing pain points';[m
[32m+[m			[32mconsole.error('Error analyzing pain points:', err);[m
[32m+[m			[32malert('Error: ' + (err.message || 'Unknown error occurred'));[m
[32m+[m		[32m} finally {[m
[32m+[m			[32manalyzingPainPoints = false;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m// Polling for pain points analysis completion[m
[32m+[m	[32mfunction pollForPainPointsAnalysis(letterId) {[m
[32m+[m		[32mlet elapsed = 0;[m
[32m+[m		[32mconst interval = 2000; // 2 seconds[m
[32m+[m		[32mconst maxTime = 60000; // 60 seconds[m
[32m+[m
[32m+[m		[32mfunction poll() {[m
[32m+[m			[32msetTimeout(async () => {[m
[32m+[m				[32mconst { data: letterData, error } = await supabase[m
[32m+[m					[32m.from('application_letters')[m
[32m+[m					[32m.select('pain_points, status')[m
[32m+[m					[32m.eq('id', letterId)[m
[32m+[m					[32m.single();[m
[32m+[m
[32m+[m				[32mif (!error && letterData && letterData.pain_points) {[m
[32m+[m					[32mconsole.log('Pain points analysis completed for letter:', letterId, letterData);[m
[32m+[m					[32mpainPointsAnalysisComplete = true;[m
[32m+[m					[32mspontaneousStep = 2;[m
[32m+[m					[32m// Update the pain points field[m
[32m+[m					[32mpainPoints = letterData.pain_points;[m
[32m+[m					[32mreturn;[m
[32m+[m				[32m}[m
[32m+[m
[32m+[m				[32melapsed += interval;[m
[32m+[m				[32mif (elapsed < maxTime) {[m
[32m+[m					[32mpoll();[m
[32m+[m				[32m} else {[m
[32m+[m					[32mconsole.error('Pain points analysis timed out');[m
[32m+[m					[32malert('Pain points analysis timed out. Please try again.');[m
[32m+[m				[32m}[m
[32m+[m			[32m}, interval);[m
[32m+[m		[32m}[m
[32m+[m		[32mpoll();[m
[32m+[m	[32m}[m
[32m+[m
 	async function generateLetter() {[m
 		if (newLetterType === 'job') {[m
 			// Handle job opening letter[m
[36m@@ -701,6 +819,13 @@[m
 	[m
 	// LinkedIn URL validation[m
 	let linkedinUrlWarning = '';[m
[32m+[m[41m	[m
[32m+[m	[32m// Two-step process for spontaneous letters[m
[32m+[m	[32mlet spontaneousStep = 1; // 1 or 2[m
[32m+[m	[32mlet companyPortalUrl = '';[m
[32m+[m	[32mlet jobsChWarning = '';[m
[32m+[m	[32mlet analyzingPainPoints = false;[m
[32m+[m	[32mlet painPointsAnalysisComplete = false;[m
 	const availableLetterLanguages = [[m
 	  { code: 'en', label: 'English' },[m
 	  { code: 'de', label: 'Deutsch' },[m
[36m@@ -836,6 +961,20 @@[m
 	  }[m
 	}[m
 [m
[32m+[m	[32m// Jobs.ch URL validation[m
[32m+[m	[32m$: {[m
[32m+[m	[32m  if (newLetterType === 'spontaneous' && companyPortalUrl.trim()) {[m
[32m+[m	[32m    const url = companyPortalUrl.trim();[m
[32m+[m	[32m    if (!url.startsWith('https://jobs.ch/') && !url.startsWith('http://jobs.ch/')) {[m
[32m+[m	[32m      jobsChWarning = 'Functionality only active for jobs.ch!';[m
[32m+[m	[32m    } else {[m
[32m+[m	[32m      jobsChWarning = '';[m
[32m+[m	[32m    }[m
[32m+[m	[32m  } else {[m
[32m+[m	[32m    jobsChWarning = '';[m
[32m+[m	[32m  }[m
[32m+[m	